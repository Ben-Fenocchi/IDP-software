//#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"
#include "Arduino.h"
#include "Wire.h"
#include "DFRobot_VL53L0X.h"
#include <Servo.h>

//---------------------------------------Setup for variables-----------------------------------------


//ultrasound setup
#define MAX_RANG (520)
#define ADC_SOLUTION (1023.0)

Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = AFMS.getMotor(1);
Adafruit_DCMotor *rightMotor = AFMS.getMotor(2);


DFRobot_VL53L0X tofSensor;  //creating tof object
Servo myServo;              // create servo object to control a servo
int servoPos = 0;           // variable to store the servo position

//pin setups
int sideSensor = A0;  //ultrasound sensor
int frLS = 5;         // back right line sensor
int flLS = 2;         // back left line sensor
int leftLS = 3;       // left side line sensor
int rightLS = 4;      // right side line sensor
int redLED = 12;
int greenLED = 13;
int blueLED = 9;
int startButton = 7;

//variable set ups
int reading;                  //defined to use later as the tof reading variable
float dist_t, sensity_t;      //for the ultrasound sensor
int oldSpeedLeft = 0;         // Declare oldSpeed as a global variable
int oldSpeedRight = 0;        // Declare oldSpeed as a global variable
int valLeft = 0;              // Declare valLeft as a global variable
int valRight = 0;             // Declare valRight as a global variable
float distanceAfterTurn = 0;  // Declare distanceAfterTurn as a global variable


int defaultSpeed = 220;
int defaultSpeedLeft = defaultSpeed;
int defaultSpeedRight = defaultSpeedLeft;
float initialAdjustmentSpeed = defaultSpeed - 65;
float adjustmentSpeed = initialAdjustmentSpeed;
int home = 1;   //so we know when we are home
int start = 0;  //robot will not move untill told to start by the button
//int blockCollected = 0;
//constants
const int error = 20;  // for the error on the ultrasound reading

//for if both sensors go off, we know which ones to speed up
int lastSensorOn = 3;  //1 for left 2 for right, 3 for the very start when both sensors are off

//for the 90 degree turns
int turningList[] = { 1, 0, 1, 4 };
int turnStage = 0;
//for any other 180 degree turn
int turningList180[] = {0,1,0,1,4 };
int turnStage180 = 0;
//for 180 degree turn on a t junction
int turningList180T[] = { 1, 0, 1, 0, 1, 4 };
int turnStage180T = 0;
//stores whether we are at a t junction or not
int tJunction = 0
//for the path
//2 is straight, 0 is right, 1 is left.  3 is if we have reached the end of the sequence
int pathList[] = { 2, 0, 2, 1, 1, 2, 2, 2, 1, 1, 2, 3 };
int pathStage = 0;
//so we can store which density of block we have, 1 heavy, -1 light
int blockType = 0;

int totalBlocksCollected = 0;



//--------------------------------------------------functions-----------------------------------------

void speedLeft(int speed) {
  speed = speed * -1;
  if (speed == oldSpeedLeft) {
    return;
  } else {
    if (speed < 0) {
      leftMotor->run(BACKWARD);
      leftMotor->setSpeed(speed * -1);
    } else {
      leftMotor->run(FORWARD);
      leftMotor->setSpeed(speed);
    }
    oldSpeedLeft = speed;
  }
}
void speedRight(int speed) {
  speed = speed * -1;
  if (speed == oldSpeedRight) {
    return;
  } else {
    if (speed < 0) {
      rightMotor->run(BACKWARD);
      rightMotor->setSpeed(speed * -1);
    } else {
      rightMotor->run(FORWARD);
      rightMotor->setSpeed(speed);
    }
    oldSpeedRight = speed;
  }
}
void turn180() {
  speedRight(-150);
  speedLeft(150);
  if (pathStage == 0 || pathStage==1 || pathStage==3 || pathStage==10 || pathStage==12 || pathStage==17){
    tJunction = 1;
  } else{
    tJunction = 0;
  }

  if (tJunction){
    speedRight(-150);
    speedLeft(150);
    while ((turningList180T[turnStage180T]) != 4) {
      if (turningList180T[turnStage180T] == digitalRead(leftLS)) {
        Serial.println(turningList180T[turnStage180T]);
        turnStage180T += 1;
      }
    }
    //to align the chassis after the turn
    while (digitalRead(rightLS) != 1) {
      speedLeft(-150);
      speedRight(0);
    }
  } else{//for non t junctions best to turn clockwise instead of anti as this then means we dont have to do diff code for the top left and right corners
      speedRight(150);
      speedLeft(-150);
      while ((turningList180[turnStage180]) != 4) {
        if (turningList180[turnStage180] == digitalRead(rightLS)) {
          Serial.println(turningList180[turnStage180]);
          turnStage180 += 1;
        }
      }
      //to align the chassis after the turn
      while (digitalRead(leftLS) != 1) {
        speedLeft(0);
        speedRight(-150);
      }
  }

  turnStage180T = 0;
  turnStage180 = 0;
  delay(300);
}
void leftTurn() {
  Serial.println("left turn started");
  speedRight(-150);
  speedLeft(150);
  while ((turningList[turnStage]) != 4) {
    if (turningList[turnStage] == digitalRead(leftLS)) {
      Serial.println(turningList[turnStage]);
      turnStage += 1;
    }
  }
  turnStage = 0;

  distanceAfterTurn = (analogRead(sideSensor)) * MAX_RANG / ADC_SOLUTION;

  Serial.println("left turn finished");

  adjustmentSpeed = initialAdjustmentSpeed;
}
void rightTurn() {
  Serial.println("right turn started");
  speedRight(150);
  speedLeft(-150);
  while ((turningList[turnStage]) != 4) {
    if (turningList[turnStage] == digitalRead(leftLS)) {
      Serial.println(turningList[turnStage]);

      turnStage += 1;
    }
  }
  turnStage = 0;


  //calculate new initialised side sensor reading
  distanceAfterTurn = (analogRead(sideSensor)) * MAX_RANG / ADC_SOLUTION;

  Serial.println("right turn finished");

  adjustmentSpeed = initialAdjustmentSpeed;
}
void followLine() {
  int valLeft = digitalRead(flLS);
  int valRight = digitalRead(frLS);
  //if left is on and right is off, slow down the left one

  if (valLeft > valRight) {
    speedRight(defaultSpeedRight+15);  
    speedLeft(adjustmentSpeed);
    //Serial.println("left turn adjustment");
    if (adjustmentSpeed < defaultSpeed) {
      adjustmentSpeed += 0.8;
    }

  }
  //if right is on and left is off, slow down the right one
  else if (valRight > valLeft) {
    speedLeft(defaultSpeedLeft+15);
    speedRight(adjustmentSpeed);
    //Serial.println("right turn adjustment");
    if (adjustmentSpeed < defaultSpeed) {
      adjustmentSpeed += 0.8;
    }

  }
  //if both are of (either side of line) then set speed to default forward
  else if (valRight == valLeft && valLeft == 0) {
    speedLeft(defaultSpeedLeft);
    speedRight(defaultSpeedRight);
    adjustmentSpeed = initialAdjustmentSpeed;
  }
}


void moveToJunction() {
  followLine();
  if (digitalRead(leftLS)) {
    Serial.println("Junction");
    Serial.println("Edging forwards");  //this should get us right on the edge of the junction before turning
    //if this works need to add to the go home function
    speedLeft(95);
    speedRight(95);
    delay(250);
    speedLeft(0);
    speedRight(0);
    delay(1000);



    if (pathList[pathStage] == 1) {
      Serial.println("turning left");
      leftTurn();
      delay(500);

    } else if (pathList[pathStage] == 0) {
      Serial.println("Turning right");
      rightTurn();
      delay(500);

    } else if (pathList[pathStage] == 2) {
      Serial.println("going Straight");
      speedLeft(defaultSpeedLeft);
      speedRight(defaultSpeedRight);

    } else {
      Serial.println("Finished Path");
      delay(5000);
    }
    //updating the index for the pathList
    pathStage += 1;

    speedLeft(defaultSpeedLeft);
    speedRight(defaultSpeedRight);
    delay(500);  //to make sure it can get off the junction and not redect it
  }
}

void checkForBlockDownwards() {
  //values for the tof sensor when touching cubes
  //46 dense
  //58 less dense
  reading = tofSensor.getDistance();
  //Serial.println(reading);
  if (reading < 70) {
    Serial.println("Block");
    //to make sure it goes up to the junction before calling its 180 degree turn to go home
    speedLeft(defaultSpeedLeft);
    speedRight(defaultSpeedRight);
    while (digitalRead(leftLS) != 1) {
      ;
    }
    blockBurglar();
    //blockCollected = 1;
  }
}
//to trap the block in the cage
void blockBurglar() {
  // goes from 0 degrees to 180 degrees in steps of 1 degree
  speedLeft(0);
  speedRight(0);
  delay(300);
  for (servoPos = 0; servoPos <= 50; servoPos += 1) {
    myServo.write(servoPos);  // tell servo to go to position in variable 'pos'
    delay(15);                // waits 15 ms for the servo to reach the position
  }
  delay(300);
  //if higher density block fire red
  if (reading < 46) {
    digitalWrite(redLED, HIGH);
    digitalWrite(greenLED, LOW);
    blockType = 1;
  } else {
    digitalWrite(greenLED, HIGH);
    digitalWrite(redLED, LOW);
    blockType = -1;
  }
  totalBlocksCollected +=1;
  ETgoHome();
}


//function should be called when a block is collected. However robot should drive to the next junction so we
//have a grid to turn against for the 180 turn in the ETgoHome function
void ETgoHome() {
  Serial.println("Going Home");
  turn180();
  Serial.println("180 DEGREES");
  pathStage -= 1;
  //we will always need to go one junction straight
  //delay to get off the junction
  speedLeft(defaultSpeedLeft);
  speedRight(defaultSpeedRight);
  delay(600);
  
  while (digitalRead(rightLS) != 1) {
    followLine();
  }
  
  while (pathStage >= 0) {
    followLine();
    //Serial.println("Path stage is");
    //Serial.println(pathStage);
    if (digitalRead(rightLS)==1) {
      int turnValue = pathList[pathStage];
      /*
      Serial.println("current turn is");
      Serial.println(pathList[pathStage]);
      Serial.println("Next turn is");
      Serial.println(pathList[pathStage - 1]);
      Serial.println("At a junction");
      */
      if (turnValue == 0) {  //what would be a right turn is now a left
        leftTurn();
        delay(250);
      } else if (turnValue == 1) {  //what would be a left turn is now a right
        rightTurn();
        delay(250);
      } else {
        ;
      }
      pathStage -= 1;  //we are going back up the turn list
      speedLeft(defaultSpeedLeft);
      speedRight(defaultSpeedRight);
      delay(700);  //to make sure it can get off the junction and not redect it
      //Serial.println("delay finished");
    }

  }
  delay(1200);
  speedLeft(0);
  speedRight(0);  //we should now be in the home box
  deliverBlock();
}

void alignChassis(){
    while (digitalRead(leftLS) == 0 && digitalRead(rightLS) == 0) {
      speedRight(150);
      speedLeft(150);
    }
    //lines up the other line sensor
    while (digitalRead(leftLS)==1 && digitalRead(rightLS) == 0) {
      speedRight(0);
    }
    while (digitalRead(rightLS)==1 && digitalRead(leftLS) == 0) {
      speedLeft(0);
    }
}
void deliverBlock() {
  //delivering the blocks from the home square and then getting back to the home square and resetting
  //right turn and deliver to red square
    speedRight(150*blockType);// blockType is -1 for light block, so it will go to the green sqaure instead
    speedLeft(-150*blockType);
    delay(3000);
    //keeps going forwards till we hit the line with one sensor
    alignChassis();
    //we should now be perfectly lined up to go forwards
    speedLeft(defaultSpeedLeft);
    speedRight(defaultSpeedRight);
    delay(500);
    while (digitalRead(leftLS) == 0) {
      ;
    }
    //now we should be at the red square
    speedLeft(0);
    speedRight(0);
    for (servoPos = 50; servoPos >= 0; servoPos -= 1) {
      myServo.write(servoPos);  // tell servo to go to position in variable 'pos'
      delay(15);                // waits 15 ms for the servo to reach the position
    }
    speedLeft(-defaultSpeedLeft);
    speedRight(-defaultSpeedRight);
    delay(500);
    while (digitalRead(leftLS)==0){
      ;
    }
    delay(1500);//should now be back in start box
    speedRight(150*blockType);
    speedLeft(-150*blockType);
    delay(3000);//should now be facing correct direction
    alignChassis();
    speedLeft(-150);
    speedRight(-150);
    delay(300);
    pathStage=0;
    speedLeft(0);
    speedRight(0);
    //stop when collected 2 blocks
    if (totalBlocksCollected == 2){
      delay(50000000000);
    }

}






  //need to add code to get back to the starting position after delivering block
  //Turned to go to red square when should have gone to green. 
  //When we dont have a T but an L junction, will the 1,0,1 turn still work?

  //ALSO THE RED LINES MAY NOT TRIP THE WHITE LINE SENSORS SO MAY HAVE TO USE DELAYS



/*
void ultrasonicCheck() {
  sensity_t = analogRead(sideSensor);
  dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;
  if (dist_t < distanceAfterTurn - error) {
    Serial.println("Block found");
    Serial.println(dist_t);
    retrieveSideBlock();
  }
}
*/

//-------------------------------------------------main program-------------------------------------------
void setup() {
  Serial.begin(9600);
  Wire.begin();
  tofSensor.begin(0x50);
  tofSensor.setMode(tofSensor.eContinuous, tofSensor.eHigh);
  tofSensor.start();
  pinMode(sideSensor, INPUT);  // the ultrasound sensor

  pinMode(frLS, INPUT);
  pinMode(flLS, INPUT);
  pinMode(leftLS, INPUT);
  pinMode(rightLS, INPUT);

  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(blueLED, OUTPUT);
  //turns off all LED's
  digitalWrite(redLED, LOW);
  digitalWrite(greenLED, LOW);
  digitalWrite(blueLED, LOW);

  pinMode(startButton, INPUT);

  myServo.attach(6);  // attaches the servo on pin 6 to the servo object


  if (!AFMS.begin()) {
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1)
      ;
  }
  Serial.println("Motor Shield found.");
  myServo.write(0);
}


void loop() {
  if (digitalRead(startButton)) {
    Serial.println("starting");
    start = 1;
    delay(1500);
  }
  if (start == 1) {
    //if (blockCollected == 0) {
    checkForBlockDownwards();
    //}

    digitalWrite(blueLED, LOW);
    speedRight(defaultSpeedRight);
    speedLeft(defaultSpeedLeft);
    moveToJunction();
    digitalWrite(blueLED, HIGH);  //Blue LED needs to flash
  }
}