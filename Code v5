//#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"
#include "Arduino.h"
#include "Wire.h"
#include "DFRobot_VL53L0X.h"
#include <Servo.h>

//---------------------------------------Setup for variables-----------------------------------------


//ultrasound setup
#define MAX_RANG (520)
#define ADC_SOLUTION (1023.0)

Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = AFMS.getMotor(1);
Adafruit_DCMotor *rightMotor = AFMS.getMotor(2);


DFRobot_VL53L0X tofSensor;  //creating tof object
Servo myServo;              // create servo object to control a servo
int servoPos = 0;           // variable to store the servo position

//pin setups
int sideSensor = A0;  //ultrasound sensor
int frLS = 2;         // back right line sensor
int flLS = 5;         // back left line sensor
int leftLS = 3;       // left side line sensor
int rightLS = 4;      // right side line sensor
int redLED = 12;
int greenLED = 13;
int blueLED = 9;
int startButton = 7;

//variable set ups
int reading;                  //defined to use later as the tof reading variable
float dist_t, sensity_t;      //for the ultrasound sensor
int oldSpeedLeft = 0;         // Declare oldSpeed as a global variable
int oldSpeedRight = 0;        // Declare oldSpeed as a global variable
int valLeft = 0;              // Declare valLeft as a global variable
int valRight = 0;             // Declare valRight as a global variable
float distanceAfterTurn = 0;  // Declare distanceAfterTurn as a global variable


int defaultSpeed = 220;
int defaultSpeedLeft = defaultSpeed;
int defaultSpeedRight = defaultSpeedLeft;
float initialAdjustmentSpeed = defaultSpeed - 60;
float adjustmentSpeed = initialAdjustmentSpeed;
int home = 1;  //so we know when we are home
int start = 0; //robot will not move untill told to start by the button
int blockCollected = 0;
//constants
const int error = 20;  // for the error on the ultrasound reading

//for if both sensors go off, we know which ones to speed up
int lastSensorOn = 3; //1 for left 2 for right, 3 for the very start when both sensors are off

//for the 90 degree turns
int turningList[]={1,0,1,4};
int turnStage = 0;

//for the path
//2 is straight, 0 is right, 1 is left.  3 is if we have reached the end of the sequence
int pathList[]={2,0,2,1,1,2,2,2,1,1,2,3};
int pathStage = 0;



//--------------------------------------------------functions-----------------------------------------

void speedLeft(int speed) {
  speed = speed * -1;
  if (speed == oldSpeedLeft) {
    return;
  } else {
    if (speed < 0) {
      leftMotor->run(BACKWARD);
      leftMotor->setSpeed(speed * -1);
    } else {
      leftMotor->run(FORWARD);
      leftMotor->setSpeed(speed);
    }
    oldSpeedLeft = speed;
  }
}
void speedRight(int speed) {
  speed = speed * -1;
  if (speed == oldSpeedRight) {
    return;
  } else {
    if (speed < 0) {
      rightMotor->run(BACKWARD);
      rightMotor->setSpeed(speed * -1);
    } else {
      rightMotor->run(FORWARD);
      rightMotor->setSpeed(speed);
    }
    oldSpeedRight = speed;
  }
}
void leftTurn() {
  speedRight( -150);
  speedLeft( 150);
  while ((turningList[turnStage])!= 4){
    if (turningList[turnStage] == digitalRead(leftLS)){
      Serial.println(turningList[turnStage]);
      turnStage +=1;
    }
  }
  turnStage = 0;
  delay(300);//delay for callibration

  distanceAfterTurn = (analogRead(sideSensor)) * MAX_RANG / ADC_SOLUTION;

  Serial.println("turn finished");

  adjustmentSpeed = initialAdjustmentSpeed;
}
void rightTurn() {
  speedRight( 150);
  speedLeft( -150);
  while ((turningList[turnStage])!= 4){
    if (turningList[turnStage] == digitalRead(leftLS)){
      Serial.println(turningList[turnStage]);
      turnStage +=1;
    }
  }
  turnStage = 0;
  delay(300);//delay for callibration


  //calculate new initialised side sensor reading
  distanceAfterTurn = (analogRead(sideSensor)) * MAX_RANG / ADC_SOLUTION;

  Serial.println("turn finished");
  
  adjustmentSpeed = initialAdjustmentSpeed;
}
void followLine() {
  int valLeft = digitalRead(flLS);
  int valRight = digitalRead(frLS);
  //if left is on and right is off, slow down the left one
  
  if (valLeft > valRight) {
    speedRight(defaultSpeedRight);//both slow down, but left motor slows down more
    speedLeft(adjustmentSpeed);
    Serial.println("left turn adjustment");
    if (adjustmentSpeed<defaultSpeed){
      adjustmentSpeed +=0.5;
    }

  }
  //if right is on and left is off, slow down the right one
  else if (valRight > valLeft) {
    speedLeft( defaultSpeedLeft);
    speedRight( adjustmentSpeed);
    Serial.println("right turn adjustment");
    if (adjustmentSpeed<defaultSpeed){
      adjustmentSpeed +=0.5;
    }

  }
  //if both are of (either side of line) then set speed to default forward
  else if (valRight == valLeft && valLeft== 0) {
    speedLeft( defaultSpeedLeft);
    speedRight( defaultSpeedRight);
    adjustmentSpeed = initialAdjustmentSpeed;
  }

  
  
}


void moveToJunction() {
  followLine();
  if (digitalRead(leftLS)) {
    Serial.println("Junction");
    Serial.println("Edging forwards");//this should get us right on the edge of the junction before turning
    //if this works need to add to the go home function
    speedLeft(95);
    speedRight(95);
    delay(500);
    speedLeft( 0);
    speedRight( 0);
    delay(1000);



    if (pathList[pathStage] == 1) {
      Serial.println("turning left");
      leftTurn();
      
    } else if (pathList[pathStage] == 0) {
      Serial.println("Turning right");
      rightTurn();

    } else if (pathList[pathStage] ==2){
      Serial.println("going Straight");
      speedLeft( defaultSpeedLeft);
      speedRight( defaultSpeedRight);
    
    } else {
        Serial.println("Finished Path");
        delay(5000);

    }
    //updating the index for the pathList
    pathStage +=1;

    speedLeft( defaultSpeedLeft);
    speedRight( defaultSpeedRight);
    delay(500);//to make sure it can get off the junction and not redect it
  }
}

void checkForBlockDownwards() {
  //values for the tof sensor when touching cubes
  //46 dense
  //58 less dense
  reading = tofSensor.getDistance();
  //Serial.println(reading);
  if (reading < 70) {
    Serial.println("Block");
    blockBurglar();
    blockCollected = 1;
  }
}
//to trap the block in the cage
void blockBurglar() {
  // goes from 0 degrees to 180 degrees in steps of 1 degree
  speedLeft(0);
  speedRight(0);
  delay(300);
  for (servoPos = 0; servoPos <= 50; servoPos += 1) {
    myServo.write(servoPos);  // tell servo to go to position in variable 'pos'
    delay(15);                // waits 15 ms for the servo to reach the position
  }
  delay(300);
  //if higher density block fire red
  if (reading<52){
    digitalWrite(redLED, HIGH);
    digitalWrite(greenLED, LOW);
  }
  else{
    digitalWrite(greenLED, HIGH);
    digitalWrite(redLED, LOW);
  }
  ETgoHome();
}


//function should be called when a block is collected. However robot should drive to the next junction so we
//have a grid to turn against for the 180 turn in the ETgoHome function
void ETgoHome(){
    
    leftTurn();
    turnStage = 1;//because of the turning list method, and our delays, if we dont do this 180 is 270
    leftTurn();
    while (turnStage >=0){
        followLine();
        if (digitalRead(rightLS)){
            int turnValue = pathList[turnStage];
            if (turnValue == 0 ){//what would be a right turn is now a left
                leftTurn();
            }else if (turnValue ==1){//what would be a left turn is now a right
                rightTurn();
            }else{
                //go straight
            }
            turnStage -=1;//we are going back up the turn list  
            speedLeft( defaultSpeedLeft);
            speedRight( defaultSpeedRight);
            delay(2000);//to make sure it can get off the junction and not redect it  
        }
    }
}




/*
void ultrasonicCheck() {
  sensity_t = analogRead(sideSensor);
  dist_t = sensity_t * MAX_RANG / ADC_SOLUTION;
  if (dist_t < distanceAfterTurn - error) {
    Serial.println("Block found");
    Serial.println(dist_t);
    retrieveSideBlock();
  }
}
*/

//-------------------------------------------------main program-------------------------------------------
void setup() {
  Serial.begin(9600);
  Wire.begin();
  tofSensor.begin(0x50);
  tofSensor.setMode(tofSensor.eContinuous,tofSensor.eHigh);
  tofSensor.start();
  pinMode(sideSensor, INPUT);  // the ultrasound sensor

  pinMode(frLS, INPUT);
  pinMode(flLS, INPUT);
  pinMode(leftLS, INPUT);
  pinMode(rightLS, INPUT);

  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(blueLED, OUTPUT);
  //turns off all LED's
  digitalWrite(redLED,LOW);
  digitalWrite(greenLED,LOW);
  digitalWrite(blueLED,LOW);

  pinMode(startButton, INPUT);

  myServo.attach(6);  // attaches the servo on pin 6 to the servo object


  if (!AFMS.begin()) {
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1)
      ;
  }
  Serial.println("Motor Shield found.");
  myServo.write(0);
}


void loop() {
  if (digitalRead(startButton)) {
    Serial.println("starting");
    start = 1;
    delay(1500);
  }
  if (start==1){
    if (blockCollected ==0){
      checkForBlockDownwards();
    }

    digitalWrite(blueLED,HIGH);
    speedRight( defaultSpeedRight);
    speedLeft( defaultSpeedLeft);
    moveToJunction();

  }
  
  
}